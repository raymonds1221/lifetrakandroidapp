buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

repositories {
    jcenter()
    maven { url 'http://download.crashlytics.com/maven' }
}

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

dependencies {
    compile 'com.android.support:multidex:1.0.0'
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':actionbarsherlock')
    compile project(':SlidingMenu')
    compile project(':ViewPagerIndicator')
    compile project(':draganddroplistview')
    compile project(':facebook')
    compile project(':apptentive-android-sdk')
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile('com.google.android.gms:play-services-fitness:7.5.0') {
        exclude module: 'support-v4'
    }
    compile 'org.slf4j:slf4j-log4j12:1.2'
    compile 'de.mindpipe.android:android-logging-log4j:1.0.2'
    compile 'com.amazonaws:aws-android-sdk-core:2.+'
    compile 'com.amazonaws:aws-android-sdk-cognito:2.+'
    compile 'com.amazonaws:aws-android-sdk-s3:2.+'
    compile 'com.amazonaws:aws-android-sdk-ddb:2.+'
    //compile 'org.slf4j:slf4j-api:1.7.7'
//    compile 'com.github.tony19:logback-android-core:1.1.1-3'
//    compile 'com.github.tony19:logback-android-classic:1.1.1-3'
}

configurations {
    all*.exclude group: 'com.android.support', module: 'support-v4'
}

apply from: '../gradle/android-legacy-dirs.gradle'

//---- Custom version info ----


def parseVersionCode() {
    // Jenkins build number
    def versionCode  = System.getenv('BUILD_NUMBER')
    if (versionCode == null) {
        def ns = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')
        def manifest = new XmlParser().parse(file(android.sourceSets.main.manifest.srcFile))
        versionCode = manifest.attribute(ns.versionCode)
    }
    return versionCode.toInteger()
}

def parseVersionName() {
    def ns = new groovy.xml.Namespace('http://schemas.android.com/apk/res/android', 'android')
    def manifest = new XmlParser().parse(file(android.sourceSets.main.manifest.srcFile))
    return manifest.attribute(ns.versionName)
}

android {
    defaultConfig {
        // Set version info for this build
        versionCode parseVersionCode()
        versionName "${parseVersionName()}.$versionCode"
        //versionName "${parseVersionName()}"

        // Enabling multidex support.
        multiDexEnabled true

        // Include the complete version to the APK file name
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def fileName = output.outputFile.name.replace(".apk", "-" + versionName + ".apk")
                output.outputFile = new File(output.outputFile.parent, fileName)
            }
        }
    }
    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }
    lintOptions {
        disable 'MissingTranslation', 'ResourceCycle'
    }
    compileOptions {
    }
    compileSdkVersion 19
    buildToolsVersion '21.1.2'
}

//---- APK signing ----

if (hasProperty('KEY_STORE_PASSWORD') && hasProperty('KEY_ALIAS') && hasProperty('KEY_PASSWORD')) {
    android {
        signingConfigs {
            release {
                storeFile file('salutron.keystore')
                storePassword KEY_STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                debuggable true
            }
        }
    }
}

//---- Code quality plugins ----

apply from: '../gradle/android-findbugs.gradle'
apply from: '../gradle/android-pmd.gradle'

findbugs {
    includeFilter = file('findbugs-include.xml')
    excludeFilter = file('findbugs-exclude.xml')
}

pmd {
    ruleSetFiles = files('pmd-stratpoint.xml')
}